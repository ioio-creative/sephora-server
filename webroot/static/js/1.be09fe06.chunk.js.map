{"version":3,"sources":["pages/admin.js","components/withSocketio.js"],"names":["Admin","socket","useRef","useEffect","current","withSocketio","host","eventEmitters","emitter","data","roomId","ack","result","console","log","eventListeners","listener","callback","stageId","additionalParams","playersInfo","choicesArray","gameId","shakeArray","newDistanceMultiplier","newRoomList","id","io","secure","on","forEach","event","emit"],"mappings":"gLAqJeA,UA/ID,WACZ,IAAMC,EAASC,iBAAO,MA2ItB,OA1IAC,qBAAU,WACRF,EAAOG,QAAUC,YAAa,CAC5BC,KAAM,iBACNC,cAAe,CACb,CACEC,QAAS,YACTC,KAAM,CACJC,OAAQ,wCAEVC,IAAK,SAACC,GACJC,QAAQC,IAAIF,EAAM,SAOxBG,eAAgB,CACd,CACEC,SAAU,aACVC,SAAU,kBAAMJ,QAAQC,IAAI,iBAQ9B,CACEE,SAAU,YACVC,SAAU,SAACR,GACT,IAAMS,EAAUT,EAAI,KACdU,EAAmBV,EAAI,YAC7BI,QAAQC,IAAI,YAAaI,EAASC,KAYtC,CACEH,SAAU,cACVC,SAAU,SAACR,GACT,IAAMW,EAAcX,EAAI,KACxBI,QAAQC,IAAI,cAAeM,KAgC/B,CACEJ,SAAU,cACVC,SAAU,SAACR,GACT,IAAMY,EAAeZ,EAAI,KACzBI,QAAQC,IAAI,cAAeO,KAI/B,CACEL,SAAU,eACVC,SAAU,SAACR,GACT,IAAMa,EAASb,EAAI,KACnBI,QAAQC,IAAI,eAAgBQ,KAIhC,CACEN,SAAU,eACVC,SAAU,SAACR,GACT,IAAMc,EAAad,EAAI,KACvBI,QAAQC,IAAI,eAAgBS,KAYhC,CACEP,SAAU,2BACVC,SAAU,SAACO,GACTX,QAAQC,IAAI,2BAA4BU,KAI5C,CACER,SAAU,WACVC,SAAU,SAACQ,GACTZ,QAAQC,IAAI,WAAYW,KAM5B,CACET,SAAU,aACVC,SAAU,SAACL,GACTC,QAAQC,IAAI,aAAcF,UAKjC,IACI,qBAAKc,GAAG,YAAR,qB,qDClJT,qBA4BerB,IA1BM,SAAC,GAIf,IAHLC,EAGI,EAHJA,KACAS,EAEI,EAFJA,eACAR,EACI,EADJA,cAEMN,EAAS0B,IAAGrB,EAAM,CAACsB,QAAQ,IAkBjC,OAdA3B,EAAO4B,GAAG,WAAW,WACnBhB,QAAQC,IAAI,eAGZP,EAAcuB,SAAQ,SAAAC,GACpB,IAAMpB,EAA6B,oBAAfoB,EAAMpB,IAAqBoB,EAAMpB,IAAK,KAC1DV,EAAO+B,KAAKD,EAAMvB,QAASuB,EAAMtB,KAAME,SAI3CI,EAAee,SAAQ,SAAAC,GACrB9B,EAAO4B,GAAGE,EAAMf,SAAUe,EAAMd,aAG3BhB,I","file":"static/js/1.be09fe06.chunk.js","sourcesContent":["import React, { useEffect, useRef } from 'react';\r\n\r\nimport withSocketio from 'components/withSocketio';\r\n\r\nimport './admin.css';\r\n\r\nconst Admin = () => {\r\n  const socket = useRef(null);\r\n  useEffect(() => {\r\n    socket.current = withSocketio({\r\n      host: '10.0.1.40:3003',\r\n      eventEmitters: [\r\n        {\r\n          emitter: 'debugRoom',\r\n          data: {\r\n            roomId: 'c66310f0-3f8a-11eb-8fa7-0dd7c084e847'\r\n          },\r\n          ack: (result) => {\r\n            console.log(result['data']);\r\n            // if (Array.isArray(result['data'])) {\r\n            //   setRoomList(result['data']);\r\n            // }\r\n          }\r\n        }\r\n      ],\r\n      eventListeners: [\r\n        {\r\n          listener: 'disconnect',\r\n          callback: () => console.log('disconnect!')\r\n        },\r\n        // {\r\n        //   listener: 'roomCreated',\r\n        //   callback: (roomName) => {\r\n        //     roomCreated\r\n        //   }\r\n        // },\r\n        {\r\n          listener: 'gameStage',\r\n          callback: (data) => {\r\n            const stageId = data['data'];\r\n            const additionalParams = data['playersInfo'];\r\n            console.log('gameStage', stageId, additionalParams);\r\n            // setGameStage(stageId);\r\n            // if (stageId === gameStatus.started) {\r\n            //   for (let i = 0; i < tempScoreArray.length; i++) {\r\n            //     tempScoreArray[i] = 0;\r\n            //   }\r\n            //   setScoreArray(new Array(5).fill(0));\r\n            // } else if (stageId === gameStatus.selecting) {\r\n            //   setChoicesArray(new Array(5).fill(-1));\r\n            // }\r\n          }\r\n        },\r\n        {\r\n          listener: 'playersInfo',\r\n          callback: (data) => {\r\n            const playersInfo = data['data'];\r\n            console.log('playersInfo', playersInfo);\r\n            // setPlayersInfo(playersInfo);\r\n            // const tempQrcodeArray = [];\r\n            // playersInfo.forEach((playerInfo, idx) => {\r\n            //   if (playerInfo['joined'] === false) {\r\n            //     const joinGamePath = window.location.origin + generatePath(routes.mobileHome, {playerId: playerInfo['playerId']});\r\n            //     // 1234\r\n            //     setJoinGamePaths((prevJoinGamePaths) => {\r\n            //       const newJoinGamePaths = [...prevJoinGamePaths];\r\n            //       newJoinGamePaths[idx] = joinGamePath;\r\n            //       return newJoinGamePaths;\r\n            //     });\r\n            //     QRCode.toDataURL(\r\n            //       joinGamePath,\r\n            //       {\r\n            //         margin: 0,\r\n            //         width: 150,\r\n            //         color: {\r\n            //           dark: playerColor[idx],\r\n            //         }\r\n            //       }, (err, url) => {\r\n            //         tempQrcodeArray[idx] = url;\r\n            //         setQrcodeArray([...tempQrcodeArray]);\r\n            //       }\r\n            //     );\r\n            //   } else {\r\n            //     tempQrcodeArray[idx] = null;\r\n            //     setQrcodeArray([...tempQrcodeArray]);\r\n            //   }\r\n            // })\r\n          }\r\n        },\r\n        {\r\n          listener: 'gameChoices',\r\n          callback: (data) => {\r\n            const choicesArray = data['data'];\r\n            console.log('gameChoices', choicesArray);\r\n            // setChoicesArray(choicesArray);\r\n          }\r\n        },\r\n        {\r\n          listener: 'gameSelected',\r\n          callback: (data) => {\r\n            const gameId = data['data'];\r\n            console.log('gameSelected', gameId);\r\n            // setGameSelected(gameId);\r\n          }\r\n        },\r\n        {\r\n          listener: 'playersShake',\r\n          callback: (data) => {\r\n            const shakeArray = data['data'];\r\n            console.log('playersShake', shakeArray);\r\n            // const tempScoreArray = [...scoreArray];\r\n            // shakeArray.forEach((score, idx) => {\r\n            //   // if (tempScoreArray[idx] === undefined) {\r\n            //   //   tempScoreArray[idx] = score;\r\n            //   // } else {\r\n            //   tempScoreArray[idx] += score;\r\n            //   // }\r\n            // })\r\n            // setScoreArray([...tempScoreArray]);\r\n          }\r\n        },\r\n        {\r\n          listener: 'updateDistanceMultiplier',\r\n          callback: (newDistanceMultiplier) => {\r\n            console.log('updateDistanceMultiplier', newDistanceMultiplier);\r\n            // setDistanceMultiplier(newDistanceMultiplier);\r\n          }\r\n        },\r\n        {\r\n          listener: 'roomList',\r\n          callback: (newRoomList) => {\r\n            console.log('roomList', newRoomList);\r\n            // if (Array.isArray(newRoomList)) {\r\n            //   setRoomList(newRoomList);\r\n            // }\r\n          }\r\n        },\r\n        {\r\n          listener: 'gameResult',\r\n          callback: (result) => {\r\n            console.log('gameResult', result);\r\n          }\r\n        }\r\n      ]\r\n    });\r\n  }, [])\r\n  return <div id=\"adminPage\">admin</div>\r\n}\r\n\r\nexport default Admin;\r\n","import io from 'socket.io-client';\r\n\r\nconst withSocketio = ({\r\n  host,\r\n  eventListeners,\r\n  eventEmitters\r\n}) => {\r\n  const socket = io(host, {secure: false});\r\n  \r\n  // console.log(socket);\r\n  \r\n  socket.on('connect', () => {\r\n    console.log('connected !');\r\n    // socket.emit('joinRoom', props.match.match.params.userId);\r\n    // wait join result msg from server\r\n    eventEmitters.forEach(event => {\r\n      const ack = (typeof(event.ack) === \"function\"? event.ack: null);\r\n      socket.emit(event.emitter, event.data, ack);\r\n    });\r\n  });\r\n\r\n  eventListeners.forEach(event => {\r\n    socket.on(event.listener, event.callback);\r\n  });\r\n\r\n  return socket;\r\n}\r\n\r\nexport default withSocketio;"],"sourceRoot":""}